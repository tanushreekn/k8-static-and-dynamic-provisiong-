STATIC PROVISIONING
-------------------
Attach AmazonEBSCSIDriverPolicy to existing master and existing worker roles.
---------------------------------------------------------------------------
Set up driver permission:

Go to IAM 
   Go to k8s-cluster-iam-master-role
      Attach AmazonEBSCSIDriverPolicy to this role
	  
	Go to k8s-cluster-iam-worker-role
      Attach AmazonEBSCSIDriverPolicy to this role
------------------------------------------------------------------------------

Go to Master Instance
 Install CSI Driver using the following command
 
 kubectl apply -k "github.com/kubernetes-sigs/aws-ebs-csi-driver/deploy/kubernetes/overlays/stable/?ref=release-1.14"
 
 Verify driver is running:
     kubectl get pods -A
------------------------------------------------------------------------------
Create EBS Volume in the same availability-zone as of k8s cluster
    Add the same K8s cluster tag to the EBS volume

Create a Persistent Volume in your master

apiVersion: v1
kind: PersistentVolume
metadata:
  name: test-pv
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 5Gi
  csi:
    driver: ebs.csi.aws.com
    fsType: ext4
    volumeHandle: Your EBS Volume-ID
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: topology.ebs.csi.aws.com/zone
              operator: In
              values:
                - Your Availability Zone
				
	==> kubectl get pv
				
Create a Persistent Volume Claim in your master

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ebs-claim
spec:
  storageClassName: "" # Empty string must be explicitly set otherwise default StorageClass will be set
  volumeName: test-pv
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
	  
	==> kubectl get pvc
	  
Create a Pod

apiVersion: v1
kind: Pod
metadata:
  name: app
spec:
  containers:
  - name: app
    image: centos
    command: ["/bin/sh"]
    args: ["-c", "while true; do echo $(date -u) >> /data/out.txt; sleep 5; done"]
    volumeMounts:
    - name: persistent-storage
      mountPath: /data
  volumes:
  - name: persistent-storage
    persistentVolumeClaim:
      claimName: ebs-claim

    ==> Kubectl get pods
--------------------------------------------------------------------------------------
	
DYNAMIC PROVISIONING
--------------------
Create a Storage Class

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: ebs-sc
provisioner: ebs.csi.aws.com
volumeBindingMode: WaitForFirstConsumer

Create a pvc 

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ebs-claim
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: ebs-sc
  resources:
    requests:
      storage: 4Gi
	  
Create pod

apiVersion: v1
kind: Pod
metadata:
  name: app
spec:
  containers:
  - name: app
    image: centos
    command: ["/bin/sh"]
    args: ["-c", "while true; do echo $(date -u) >> /data/out.txt; sleep 5; done"]
    volumeMounts:
    - name: persistent-storage
      mountPath: /data
  volumes:
  - name: persistent-storage
    persistentVolumeClaim:
      claimName: ebs-claim